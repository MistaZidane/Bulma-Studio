{"version":3,"sources":["highlightjs-line-numbers-js-es5.js","webpack:///node_modules/highlightjs-line-numbers.js/src/highlightjs-line-numbers.js"],"names":[],"mappings":"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","file":"x","sourcesContent":["(window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || []).push([[\"highlightjs-line-numbers-js\"],{\n\n/***/ \"./node_modules/highlightjs-line-numbers.js/src/highlightjs-line-numbers.js\":\n/*!**********************************************************************************!*\\\n  !*** ./node_modules/highlightjs-line-numbers.js/src/highlightjs-line-numbers.js ***!\n  \\**********************************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\n// jshint multistr:true\n\n(function (w, d) {\n    'use strict';\n\n    var TABLE_NAME = 'hljs-ln',\n        LINE_NAME = 'hljs-ln-line',\n        CODE_BLOCK_NAME = 'hljs-ln-code',\n        NUMBERS_BLOCK_NAME = 'hljs-ln-numbers',\n        NUMBER_LINE_NAME = 'hljs-ln-n',\n        DATA_ATTR_NAME = 'data-line-number',\n        BREAK_LINE_REGEXP = /\\r\\n|\\r|\\n/g;\n\n    if (w.hljs) {\n        w.hljs.initLineNumbersOnLoad = initLineNumbersOnLoad;\n        w.hljs.lineNumbersBlock = lineNumbersBlock;\n        w.hljs.lineNumbersValue = lineNumbersValue;\n\n        addStyles();\n    } else {\n        w.console.error('highlight.js not detected!');\n    }\n\n    function isHljsLnCodeDescendant(domElt) {\n        var curElt = domElt;\n        while (curElt) {\n            if (curElt.className && curElt.className.indexOf('hljs-ln-code') !== -1) {\n                return true;\n            }\n            curElt = curElt.parentNode;\n        }\n        return false;\n    }\n\n    function getHljsLnTable(hljsLnDomElt) {\n        var curElt = hljsLnDomElt;\n        while (curElt.nodeName !== 'TABLE') {\n            curElt = curElt.parentNode;\n        }\n        return curElt;\n    }\n\n    // Function to workaround a copy issue with Microsoft Edge.\n    // Due to hljs-ln wrapping the lines of code inside a <table> element,\n    // itself wrapped inside a <pre> element, window.getSelection().toString()\n    // does not contain any line breaks. So we need to get them back using the\n    // rendered code in the DOM as reference.\n    function edgeGetSelectedCodeLines(selection) {\n        // current selected text without line breaks\n        var selectionText = selection.toString();\n\n        // get the <td> element wrapping the first line of selected code\n        var tdAnchor = selection.anchorNode;\n        while (tdAnchor.nodeName !== 'TD') {\n            tdAnchor = tdAnchor.parentNode;\n        }\n\n        // get the <td> element wrapping the last line of selected code\n        var tdFocus = selection.focusNode;\n        while (tdFocus.nodeName !== 'TD') {\n            tdFocus = tdFocus.parentNode;\n        }\n\n        // extract line numbers\n        var firstLineNumber = parseInt(tdAnchor.dataset.lineNumber);\n        var lastLineNumber = parseInt(tdFocus.dataset.lineNumber);\n\n        // multi-lines copied case\n        if (firstLineNumber != lastLineNumber) {\n\n            var firstLineText = tdAnchor.textContent;\n            var lastLineText = tdFocus.textContent;\n\n            // if the selection was made backward, swap values\n            if (firstLineNumber > lastLineNumber) {\n                var tmp = firstLineNumber;\n                firstLineNumber = lastLineNumber;\n                lastLineNumber = tmp;\n                tmp = firstLineText;\n                firstLineText = lastLineText;\n                lastLineText = tmp;\n            }\n\n            // discard not copied characters in first line\n            while (selectionText.indexOf(firstLineText) !== 0) {\n                firstLineText = firstLineText.slice(1);\n            }\n\n            // discard not copied characters in last line\n            while (selectionText.lastIndexOf(lastLineText) === -1) {\n                lastLineText = lastLineText.slice(0, -1);\n            }\n\n            // reconstruct and return the real copied text\n            var selectedText = firstLineText;\n            var hljsLnTable = getHljsLnTable(tdAnchor);\n            for (var i = firstLineNumber + 1 ; i < lastLineNumber ; ++i) {\n                var codeLineSel = format('.{0}[{1}=\"{2}\"]', [CODE_BLOCK_NAME, DATA_ATTR_NAME, i]);\n                var codeLineElt = hljsLnTable.querySelector(codeLineSel);\n                selectedText += '\\n' + codeLineElt.textContent;\n            }\n            selectedText += '\\n' + lastLineText;\n            return selectedText;\n        // single copied line case\n        } else {\n            return selectionText;\n        }\n    }\n\n    // ensure consistent code copy/paste behavior across all browsers\n    // (see https://github.com/wcoder/highlightjs-line-numbers.js/issues/51)\n    document.addEventListener('copy', function(e) {\n        // get current selection\n        var selection = window.getSelection();\n        // override behavior when one wants to copy line of codes\n        if (isHljsLnCodeDescendant(selection.anchorNode)) {\n            var selectionText;\n            // workaround an issue with Microsoft Edge as copied line breaks\n            // are removed otherwise from the selection string\n            if (window.navigator.userAgent.indexOf(\"Edge\") !== -1) {\n                selectionText = edgeGetSelectedCodeLines(selection);\n            } else {\n                // other browsers can directly use the selection string\n                selectionText = selection.toString();\n            }\n            e.clipboardData.setData('text/plain', selectionText);\n            e.preventDefault();\n        }\n    });\n\n    function addStyles () {\n        var css = d.createElement('style');\n        css.type = 'text/css';\n        css.innerHTML = format(\n            '.{0}{border-collapse:collapse}' +\n            '.{0} td{padding:0}' +\n            '.{1}:before{content:attr({2})}',\n        [\n            TABLE_NAME,\n            NUMBER_LINE_NAME,\n            DATA_ATTR_NAME\n        ]);\n        d.getElementsByTagName('head')[0].appendChild(css);\n    }\n\n    function initLineNumbersOnLoad (options) {\n        if (d.readyState === 'interactive' || d.readyState === 'complete') {\n            documentReady(options);\n        } else {\n            w.addEventListener('DOMContentLoaded', function () {\n                documentReady(options);\n            });\n        }\n    }\n\n    function documentReady (options) {\n        try {\n            var blocks = d.querySelectorAll('code.hljs,code.nohighlight');\n\n            for (var i in blocks) {\n                if (blocks.hasOwnProperty(i)) {\n                    lineNumbersBlock(blocks[i], options);\n                }\n            }\n        } catch (e) {\n            w.console.error('LineNumbers error: ', e);\n        }\n    }\n\n    function lineNumbersBlock (element, options) {\n        if (typeof element !== 'object') return;\n\n        async(function () {\n            element.innerHTML = lineNumbersInternal(element, options);\n        });\n    }\n\n    function lineNumbersValue (value, options) {\n        if (typeof value !== 'string') return;\n\n        var element = document.createElement('code')\n        element.innerHTML = value\n\n        return lineNumbersInternal(element, options);\n    }\n\n    function lineNumbersInternal (element, options) {\n        // define options or set default\n        options = options || {\n            singleLine: false\n        };\n\n        // convert options\n        var firstLineIndex = !!options.singleLine ? 0 : 1;\n\n        duplicateMultilineNodes(element);\n\n        return addLineNumbersBlockFor(element.innerHTML, firstLineIndex);\n    }\n\n    function addLineNumbersBlockFor (inputHtml, firstLineIndex) {\n\n        var lines = getLines(inputHtml);\n\n        // if last line contains only carriage return remove it\n        if (lines[lines.length-1].trim() === '') {\n            lines.pop();\n        }\n\n        if (lines.length > firstLineIndex) {\n            var html = '';\n\n            for (var i = 0, l = lines.length; i < l; i++) {\n                html += format(\n                    '<tr>' +\n                        '<td class=\"{0} {1}\" {3}=\"{5}\">' +\n                            '<div class=\"{2}\" {3}=\"{5}\"></div>' +\n                        '</td>' +\n                        '<td class=\"{0} {4}\" {3}=\"{5}\">' +\n                            '{6}' +\n                        '</td>' +\n                    '</tr>',\n                [\n                    LINE_NAME,\n                    NUMBERS_BLOCK_NAME,\n                    NUMBER_LINE_NAME,\n                    DATA_ATTR_NAME,\n                    CODE_BLOCK_NAME,\n                    i + 1,\n                    lines[i].length > 0 ? lines[i] : ' '\n                ]);\n            }\n\n            return format('<table class=\"{0}\">{1}</table>', [ TABLE_NAME, html ]);\n        }\n\n        return inputHtml;\n    }\n\n    /**\n     * Recursive method for fix multi-line elements implementation in highlight.js\n     * Doing deep passage on child nodes.\n     * @param {HTMLElement} element\n     */\n    function duplicateMultilineNodes (element) {\n        var nodes = element.childNodes;\n        for (var node in nodes) {\n            if (nodes.hasOwnProperty(node)) {\n                var child = nodes[node];\n                if (getLinesCount(child.textContent) > 0) {\n                    if (child.childNodes.length > 0) {\n                        duplicateMultilineNodes(child);\n                    } else {\n                        duplicateMultilineNode(child.parentNode);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Method for fix multi-line elements implementation in highlight.js\n     * @param {HTMLElement} element\n     */\n    function duplicateMultilineNode (element) {\n        var className = element.className;\n\n        if ( ! /hljs-/.test(className)) return;\n\n        var lines = getLines(element.innerHTML);\n\n        for (var i = 0, result = ''; i < lines.length; i++) {\n            var lineText = lines[i].length > 0 ? lines[i] : ' ';\n            result += format('<span class=\"{0}\">{1}</span>\\n', [ className,  lineText ]);\n        }\n\n        element.innerHTML = result.trim();\n    }\n\n    function getLines (text) {\n        if (text.length === 0) return [];\n        return text.split(BREAK_LINE_REGEXP);\n    }\n\n    function getLinesCount (text) {\n        return (text.trim().match(BREAK_LINE_REGEXP) || []).length;\n    }\n\n    function async (func) {\n        w.setTimeout(func, 0);\n    }\n\n    /**\n     * {@link https://wcoder.github.io/notes/string-format-for-string-formating-in-javascript}\n     * @param {string} format\n     * @param {array} args\n     */\n    function format (format, args) {\n        return format.replace(/\\{(\\d+)\\}/g, function(m, n){\n            return args[n] ? args[n] : m;\n        });\n    }\n\n}(window, document));\n\n\n/***/ })\n\n}]);\n//# sourceMappingURL=highlightjs-line-numbers-js-es2015.js.map","// jshint multistr:true\n\n(function (w, d) {\n    'use strict';\n\n    var TABLE_NAME = 'hljs-ln',\n        LINE_NAME = 'hljs-ln-line',\n        CODE_BLOCK_NAME = 'hljs-ln-code',\n        NUMBERS_BLOCK_NAME = 'hljs-ln-numbers',\n        NUMBER_LINE_NAME = 'hljs-ln-n',\n        DATA_ATTR_NAME = 'data-line-number',\n        BREAK_LINE_REGEXP = /\\r\\n|\\r|\\n/g;\n\n    if (w.hljs) {\n        w.hljs.initLineNumbersOnLoad = initLineNumbersOnLoad;\n        w.hljs.lineNumbersBlock = lineNumbersBlock;\n        w.hljs.lineNumbersValue = lineNumbersValue;\n\n        addStyles();\n    } else {\n        w.console.error('highlight.js not detected!');\n    }\n\n    function isHljsLnCodeDescendant(domElt) {\n        var curElt = domElt;\n        while (curElt) {\n            if (curElt.className && curElt.className.indexOf('hljs-ln-code') !== -1) {\n                return true;\n            }\n            curElt = curElt.parentNode;\n        }\n        return false;\n    }\n\n    function getHljsLnTable(hljsLnDomElt) {\n        var curElt = hljsLnDomElt;\n        while (curElt.nodeName !== 'TABLE') {\n            curElt = curElt.parentNode;\n        }\n        return curElt;\n    }\n\n    // Function to workaround a copy issue with Microsoft Edge.\n    // Due to hljs-ln wrapping the lines of code inside a <table> element,\n    // itself wrapped inside a <pre> element, window.getSelection().toString()\n    // does not contain any line breaks. So we need to get them back using the\n    // rendered code in the DOM as reference.\n    function edgeGetSelectedCodeLines(selection) {\n        // current selected text without line breaks\n        var selectionText = selection.toString();\n\n        // get the <td> element wrapping the first line of selected code\n        var tdAnchor = selection.anchorNode;\n        while (tdAnchor.nodeName !== 'TD') {\n            tdAnchor = tdAnchor.parentNode;\n        }\n\n        // get the <td> element wrapping the last line of selected code\n        var tdFocus = selection.focusNode;\n        while (tdFocus.nodeName !== 'TD') {\n            tdFocus = tdFocus.parentNode;\n        }\n\n        // extract line numbers\n        var firstLineNumber = parseInt(tdAnchor.dataset.lineNumber);\n        var lastLineNumber = parseInt(tdFocus.dataset.lineNumber);\n\n        // multi-lines copied case\n        if (firstLineNumber != lastLineNumber) {\n\n            var firstLineText = tdAnchor.textContent;\n            var lastLineText = tdFocus.textContent;\n\n            // if the selection was made backward, swap values\n            if (firstLineNumber > lastLineNumber) {\n                var tmp = firstLineNumber;\n                firstLineNumber = lastLineNumber;\n                lastLineNumber = tmp;\n                tmp = firstLineText;\n                firstLineText = lastLineText;\n                lastLineText = tmp;\n            }\n\n            // discard not copied characters in first line\n            while (selectionText.indexOf(firstLineText) !== 0) {\n                firstLineText = firstLineText.slice(1);\n            }\n\n            // discard not copied characters in last line\n            while (selectionText.lastIndexOf(lastLineText) === -1) {\n                lastLineText = lastLineText.slice(0, -1);\n            }\n\n            // reconstruct and return the real copied text\n            var selectedText = firstLineText;\n            var hljsLnTable = getHljsLnTable(tdAnchor);\n            for (var i = firstLineNumber + 1 ; i < lastLineNumber ; ++i) {\n                var codeLineSel = format('.{0}[{1}=\"{2}\"]', [CODE_BLOCK_NAME, DATA_ATTR_NAME, i]);\n                var codeLineElt = hljsLnTable.querySelector(codeLineSel);\n                selectedText += '\\n' + codeLineElt.textContent;\n            }\n            selectedText += '\\n' + lastLineText;\n            return selectedText;\n        // single copied line case\n        } else {\n            return selectionText;\n        }\n    }\n\n    // ensure consistent code copy/paste behavior across all browsers\n    // (see https://github.com/wcoder/highlightjs-line-numbers.js/issues/51)\n    document.addEventListener('copy', function(e) {\n        // get current selection\n        var selection = window.getSelection();\n        // override behavior when one wants to copy line of codes\n        if (isHljsLnCodeDescendant(selection.anchorNode)) {\n            var selectionText;\n            // workaround an issue with Microsoft Edge as copied line breaks\n            // are removed otherwise from the selection string\n            if (window.navigator.userAgent.indexOf(\"Edge\") !== -1) {\n                selectionText = edgeGetSelectedCodeLines(selection);\n            } else {\n                // other browsers can directly use the selection string\n                selectionText = selection.toString();\n            }\n            e.clipboardData.setData('text/plain', selectionText);\n            e.preventDefault();\n        }\n    });\n\n    function addStyles () {\n        var css = d.createElement('style');\n        css.type = 'text/css';\n        css.innerHTML = format(\n            '.{0}{border-collapse:collapse}' +\n            '.{0} td{padding:0}' +\n            '.{1}:before{content:attr({2})}',\n        [\n            TABLE_NAME,\n            NUMBER_LINE_NAME,\n            DATA_ATTR_NAME\n        ]);\n        d.getElementsByTagName('head')[0].appendChild(css);\n    }\n\n    function initLineNumbersOnLoad (options) {\n        if (d.readyState === 'interactive' || d.readyState === 'complete') {\n            documentReady(options);\n        } else {\n            w.addEventListener('DOMContentLoaded', function () {\n                documentReady(options);\n            });\n        }\n    }\n\n    function documentReady (options) {\n        try {\n            var blocks = d.querySelectorAll('code.hljs,code.nohighlight');\n\n            for (var i in blocks) {\n                if (blocks.hasOwnProperty(i)) {\n                    lineNumbersBlock(blocks[i], options);\n                }\n            }\n        } catch (e) {\n            w.console.error('LineNumbers error: ', e);\n        }\n    }\n\n    function lineNumbersBlock (element, options) {\n        if (typeof element !== 'object') return;\n\n        async(function () {\n            element.innerHTML = lineNumbersInternal(element, options);\n        });\n    }\n\n    function lineNumbersValue (value, options) {\n        if (typeof value !== 'string') return;\n\n        var element = document.createElement('code')\n        element.innerHTML = value\n\n        return lineNumbersInternal(element, options);\n    }\n\n    function lineNumbersInternal (element, options) {\n        // define options or set default\n        options = options || {\n            singleLine: false\n        };\n\n        // convert options\n        var firstLineIndex = !!options.singleLine ? 0 : 1;\n\n        duplicateMultilineNodes(element);\n\n        return addLineNumbersBlockFor(element.innerHTML, firstLineIndex);\n    }\n\n    function addLineNumbersBlockFor (inputHtml, firstLineIndex) {\n\n        var lines = getLines(inputHtml);\n\n        // if last line contains only carriage return remove it\n        if (lines[lines.length-1].trim() === '') {\n            lines.pop();\n        }\n\n        if (lines.length > firstLineIndex) {\n            var html = '';\n\n            for (var i = 0, l = lines.length; i < l; i++) {\n                html += format(\n                    '<tr>' +\n                        '<td class=\"{0} {1}\" {3}=\"{5}\">' +\n                            '<div class=\"{2}\" {3}=\"{5}\"></div>' +\n                        '</td>' +\n                        '<td class=\"{0} {4}\" {3}=\"{5}\">' +\n                            '{6}' +\n                        '</td>' +\n                    '</tr>',\n                [\n                    LINE_NAME,\n                    NUMBERS_BLOCK_NAME,\n                    NUMBER_LINE_NAME,\n                    DATA_ATTR_NAME,\n                    CODE_BLOCK_NAME,\n                    i + 1,\n                    lines[i].length > 0 ? lines[i] : ' '\n                ]);\n            }\n\n            return format('<table class=\"{0}\">{1}</table>', [ TABLE_NAME, html ]);\n        }\n\n        return inputHtml;\n    }\n\n    /**\n     * Recursive method for fix multi-line elements implementation in highlight.js\n     * Doing deep passage on child nodes.\n     * @param {HTMLElement} element\n     */\n    function duplicateMultilineNodes (element) {\n        var nodes = element.childNodes;\n        for (var node in nodes) {\n            if (nodes.hasOwnProperty(node)) {\n                var child = nodes[node];\n                if (getLinesCount(child.textContent) > 0) {\n                    if (child.childNodes.length > 0) {\n                        duplicateMultilineNodes(child);\n                    } else {\n                        duplicateMultilineNode(child.parentNode);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Method for fix multi-line elements implementation in highlight.js\n     * @param {HTMLElement} element\n     */\n    function duplicateMultilineNode (element) {\n        var className = element.className;\n\n        if ( ! /hljs-/.test(className)) return;\n\n        var lines = getLines(element.innerHTML);\n\n        for (var i = 0, result = ''; i < lines.length; i++) {\n            var lineText = lines[i].length > 0 ? lines[i] : ' ';\n            result += format('<span class=\"{0}\">{1}</span>\\n', [ className,  lineText ]);\n        }\n\n        element.innerHTML = result.trim();\n    }\n\n    function getLines (text) {\n        if (text.length === 0) return [];\n        return text.split(BREAK_LINE_REGEXP);\n    }\n\n    function getLinesCount (text) {\n        return (text.trim().match(BREAK_LINE_REGEXP) || []).length;\n    }\n\n    function async (func) {\n        w.setTimeout(func, 0);\n    }\n\n    /**\n     * {@link https://wcoder.github.io/notes/string-format-for-string-formating-in-javascript}\n     * @param {string} format\n     * @param {array} args\n     */\n    function format (format, args) {\n        return format.replace(/\\{(\\d+)\\}/g, function(m, n){\n            return args[n] ? args[n] : m;\n        });\n    }\n\n}(window, document));\n"]}